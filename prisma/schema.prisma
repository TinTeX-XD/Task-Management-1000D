// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  avatar      String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedTasks Task[]     @relation("TaskAssignee")
  createdTasks  Task[]     @relation("TaskCreator")
  projects      Project[]  @relation("ProjectMembers")
  ownedProjects Project[]  @relation("ProjectOwner")
  invoices      Invoice[]

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  address     String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]
  invoices Invoice[]

  @@map("clients")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(ACTIVE)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  color       String        @default("#3B82F6")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])
  
  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])
  
  members User[] @relation("ProjectMembers")
  tasks   Task[]
  invoices Invoice[]

  // GitHub Integration
  githubRepo   String?
  githubBranch String?

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(BACKLOG)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Float?
  actualHours    Float?
  tags        String?    // JSON array of tags
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  creatorId String
  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])

  // GitHub Integration
  githubBranch String?
  githubPR     String?
  
  // WhatsApp Integration
  whatsappLogs WhatsAppLog[]

  @@map("tasks")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  title       String
  description String?       @db.Text
  status      InvoiceStatus @default(DRAFT)
  amount      Float
  taxAmount   Float         @default(0)
  totalAmount Float
  dueDate     DateTime
  paidDate    DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Invoice Items
  items InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Float
  rate        Float
  amount      Float

  // Relations
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model WhatsAppLog {
  id          String            @id @default(cuid())
  messageId   String?
  recipient   String
  message     String            @db.Text
  status      WhatsAppStatus    @default(PENDING)
  messageType WhatsAppMessageType @default(TEXT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  @@map("whatsapp_logs")
}

// Enums
enum Role {
  USER
  ADMIN
  MANAGER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum WhatsAppStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum WhatsAppMessageType {
  TEXT
  TEMPLATE
  NOTIFICATION
}
